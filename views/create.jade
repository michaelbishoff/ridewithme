extends layout

block extra_styles
  style.
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
    #map {
      height: 90%;
    }

block content
  #map
  #createForm
    .container.container-narrow
      h1(style="margin-bottom:30px;") Create Route
      .thumbnail.padding-thumbnail
          .form-group
            label(for="title") Name Your Route
            input.form-control(type="text", id="title", name="title")
          .form-group
            label(for="to") Start Location
            input.form-control(type="text", id="to", name="to", readonly)
          .form-group
            label(for="from") End Location
            input.form-control(type="text", id="from", name="from", readonly)
          .form-group
            label(for="distance") Distance (km)
            input.form-control(type="number", id="distance", name="distance", readonly)
          .form-group
            label(for="tags") Tags
            input.form-control(type="text", id="tags", name="tags" placeholder="curvy, down hill, etc.")
          .form-group
            label(for="difficulty") Difficulty Level
            br
            button#hard.btn.btn-success Easy
            button#hard.btn.btn-warning Intermediate
            button#hard.btn.btn-danger Hard
            div.tabbable.tabs-below
              ul.nav.nav-pills
                li.active(role="presentation") Easy
                li Intermediate
                li Advanced
          hr
          button#submit.btn.btn-default(type="submit") Submit
  #preview(style="display:none;")   

block extra_scripts
  script(src="http://www.parsecdn.com/js/parse-1.5.0.min.js")
  script(src="/javascripts/key.js")
  script.
    var Ride = Parse.Object.extend("RidePath");
    var startLocation;
    var endLocation;

    var markers = [];

    function getLoc(next, andThen) {
      var geoSuccess = function(position) {
        initialLoc = position;
        next();
        andThen();
      }
      // initial loc
      navigator.geolocation.getCurrentPosition(geoSuccess);
    }

    function initMap() {
      var map = new google.maps.Map(document.getElementById('map'), {
        zoom: 10,
        center: {lat: 37.530, lng:-122.112} // Bae Area
      });
        
      var waypoints = [];
        
      var geocoder = new google.maps.Geocoder;
      var infowindow = new google.maps.InfoWindow;
        
      var bottomBox = document.getElementById('bottomBox');
      map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(bottomBox);
      
      var directionsService = new google.maps.DirectionsService;
      var directionsDisplay = new google.maps.DirectionsRenderer({
        draggable: true,
        map: map,
      });
      
      directionsDisplay.addListener('directions_changed', function() {
        computeTotalDistance(directionsDisplay.getDirections());
      });
        
      google.maps.event.addListener(map, "rightclick", function(event) {
        var lat = event.latLng.lat();
        var lng = event.latLng.lng();
        
        if (startLocation == null) {
          startLocation = new google.maps.LatLng(lat, lng);
          console.log("Start: " +lat + ", " + lng);

          geocoder.geocode({'location': startLocation}, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
              if (results[1]) {
                markers.push(new google.maps.Marker({
                  position: startLocation,
                  map: map
                }));
                
                infowindow.setContent(results[1].formatted_address);
                infowindow.open(map, markers[0]);
                document.getElementById("from").value = results[1].formatted_address;
                  
              } else {
                window.alert('No results found');
              }
            } else {
              window.alert('Geocoder failed due to: ' + status);
            }
          });
        } else if (endLocation == null) {
          deleteMarkers();
          endLocation = new google.maps.LatLng(lat, lng);
          console.log("End: " + lat + ", " + lng);
          
          displayRoute(startLocation, endLocation, directionsService, directionsDisplay, waypoints);
          
          geocoder.geocode({'location': endLocation}, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
              if (results[1]) {
                  document.getElementById("to").value = results[1].formatted_address;
              } else {
                window.alert('No results found');
              }
            } else {
              window.alert('Geocoder failed due to: ' + status);
            }
          });
          
        } else {
          waypoints.push({location: endLocation});
          endLocation = new google.maps.LatLng(lat, lng);
          
          displayRoute(startLocation, endLocation, directionsService, directionsDisplay, waypoints);
            
          geocoder.geocode({'location': endLocation}, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
              if (results[1]) {
                  document.getElementById("to").value = results[1].formatted_address;
              } else {
                window.alert('No results found');
              }
            } else {
              window.alert('Geocoder failed due to: ' + status);
            }
          });
        }
      });
        
      document.getElementById("submit").addEventListener("click", function() {
        saveRide(directionsDisplay, waypoints);
      });
    }

    function displayRoute(origin, destination, service, display, waypoints) {
      service.route({
        origin: origin,
        destination: destination,
        waypoints: waypoints,
        travelMode: google.maps.TravelMode.DRIVING,
        avoidTolls: true
      }, function(response, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          display.setDirections(response);
        } else {
          alert('Could not display directions due to: ' + status);
        }
      });
    }

    function computeTotalDistance(result) {
      var total = 0;
      var myroute = result.routes[0];
      for (var i = 0; i < myroute.legs.length; i++) {
        total += myroute.legs[i].distance.value;
      }
      total = total / 1000;
      document.getElementById('distance').value = total;
    }
    
    function deleteMarkers() {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      markers = [];
    }
    
    function saveRide(directionsDisplay, waypoints) {
      var legs = directionsDisplay.directions.routes[0].legs;
      var data = {};
      data.start = {'lat': legs[0].start_location.lat(), 'lng':legs[0].start_location.lng()}
      data.end = {'lat': legs[legs.length-1].end_location.lat(), 'lng':legs[legs.length-1].end_location.lng()}
      
      var totalWP = [];
      for (var i=0; i < legs.length; i++) {
        // Don't store the origin
        if (i != 0) {
        totalWP.push([legs[i].start_location.lat(), legs[i].start_location.lng()]);
        }
        
        var legWP = legs[i].via_waypoints;
        for (var j=0; j < legWP.length; j++) {
            totalWP.push([legWP[j].lat(), legWP[j].lng()]);
        }
        
        // Don't store the destintation
        if ( i != legs.length - 1) {
            totalWP.push([legs[i].end_location.lat(), legs[i].end_location.lng()]);
        }
      }

      data.waypoints = totalWP;
      var rideString = JSON.stringify(data)
      var ride = new Ride();
      
      ride.set("rideTitle", document.getElementById("title").value);
      ride.set("from", document.getElementById("from").value);
      ride.set("to", document.getElementById("to").value);
      ride.set("distance",Number(document.getElementById("distance").value));
      ride.set("tags", document.getElementById("tags").value);
      ride.set("difficulty", "Intermediate");
      ride.set("ride", rideString);
      
      ride.save(null, {
        success: function(object) {
            console.log("saved");
        },
        error: function(model, error) {
            alert("didnt' save");
        }
      });
    }

  script(src="https://maps.googleapis.com/maps/api/js?signed_in=true&callback=initMap")